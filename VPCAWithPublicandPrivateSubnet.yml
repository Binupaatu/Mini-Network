---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creating VPC with Piblic and private subnets'
Parameters:
  VpcCIDR:
    Default: 10.100.0.0/16
    Type: String
  PublicSubnet1CIDR:
    Default: 10.100.0.0/24
    Description: IP Range for public subnet1
    Type: String
 
  PrivateSubnet1CIDR:
    Default: 10.100.1.0/24
    Description: IP Range for private subnet1
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

Resources:
  VPCMiniA:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsHostnames: true  
        EnableDnsSupport: true
        InstanceTenancy: default
        Tags: 
        - Key: Name
          Value: MiniNWVPCA

  InternetGateway:    
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags: 
        - Key: IGWName
          Value: MiniNWIGWVPCA

  InternetgatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPCMiniA

  #Public Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:  
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: PubSub1VPCMiniA
      VpcId: !Ref VPCMiniA

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: PvtSub1VPCMiniA
      VpcId: !Ref VPCMiniA

 
  #Public Subnet Rote table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key: Name
          Value: Public Route Table MiniNw
      VpcId: !Ref VPCMiniA

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0 
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key: Name
          Value: Private Route Table MiniNw
      VpcId: !Ref VPCMiniA
      
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow http to client host"
      VpcId: !Ref VPCMiniA
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "App Load balancer secgroup"
    
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SSH SecGroup"
      VpcId: !Ref VPCMiniA
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: "SSH secgroup"

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPCMiniA 
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  PublicSubnet:
    Description: The subnet ID to use for private web servers
    Value: !Ref PublicSubnet1
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PublicSubnetID'
  PrivateSubnet:
    Description: The subnet ID to use for private web servers
    Value: !Ref PrivateSubnet1
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PrivateSubnetID'

